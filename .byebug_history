quit
request.format
@project.name
@project.name
c
project_params
c
project: { cname: 'updated project' } 
params
c
params
c
params
parmas
c
params
params.require(:project)
paramsparams.require(:project)
params
project_params
c
params.require(:project)
params
project_params
c
current_user
c
Project.find(params[:id])
c
Project.find(params[:id])
c
current_user.created_projectsc
current_user.created_projects
current_user.created_projects.find_by(id: params[:id])
params
current_user.manager?
current_user
        if current_user.qa?
c
current_user.manager?
current_user
c
decoded = JWT.decode(token, Rails.application.credentials.secret_key_base)[0]
Rails.application.secret_key_base
c
decoded = JWT.decode(token, Rails.application.secret_key_base)[0]
c
decoded = JWT.decode(token, Rails.application.secret_key_base)[0]
c
curl -X POST http://localhost:3000/api/v1/login \
     -H "Content-Type: application/json" \
     -d '{"email": "user@example.com", "password": "password123"}'
puts user.generate_jwt
user = User.first
JWT.decode(token, Rails.application.secret_key_base, true, { algorithm: 'HS256' })[0]
c
Rails.application.secret_key_base
JWT.decode(token, Rails.application.secret_key_base)[0]
token
Rails.application.secret_key_base
JWT.decode(token, Rails.application.secret_key_base)[0]
c
 decoded = JWT.decode(token, Rails.application.secret_key_base)[0]
decoded = JWT.decode(token, Rails.application.secret_key_base)[0]
Rails.application.secret_key_base
Rails.application.secrets
Rails.application.secrets.secret_key_base
JWT.decode(token)
token
tokeb
c
user&.valid_password?(params[:password])
user
c
params
User.find_for_database_authentication(email: params[:email])
user
c
current_user.manager?
c
@bug.update!(status: params[:status], developer_id: current_user.id)
current_user.developer?
c
current_user.developer?
@bug
n
@bug
c
@bug
c
@bug
c
@bug.valid?
n
@bug
@bug = @project.bugs.build(bug_params)
c
C
EXIT
c
params
c
current_user.created_projects
c
current_user.projects
current_user.id
c
 @bug.valid?
c
@bug.save!
